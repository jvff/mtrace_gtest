apply plugin: 'cpp'

model {
    repositories {
        lib(PrebuiltLibraries) {
            gtest {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgtest.a")
                }
            }
            gmock {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgmock.a")
                }
            }
            gmock_main {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("/usr/lib/x86_64-linux-gnu/libgmock_main.a")
                }
            }
        }
    }

    components {
        mtrace_gtest(NativeLibrarySpec) {
            sources.cpp.exportedHeaders {
                srcDir 'include/mtrace_gtest/cpp'
                include '**/*.hpp'
            }
        }
        test(NativeExecutableSpec) {
            binaries.all {
                linker.args "-pthread"
            }
            sources.cpp {
                lib library: 'mtrace_gtest', linkage: 'static'
                lib library: 'gtest', linkage: 'static'
                lib library: 'gmock', linkage: 'static'
                lib library: 'gmock_main', linkage: 'static'
            }
        }
    }
}

task checkHeaderGuards(type: com.janitovff.headerguardplugin.HeaderGuardTask)

task test(type: Exec, dependsOn: ['testExecutable', 'checkHeaderGuards']) {
    doFirst {
        def binary = binaries.getByName 'testExecutable'
        def executableFile = binary.getExecutableFile()

        commandLine executableFile.toString()
    }
}
